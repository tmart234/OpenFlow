name: Create Release

on:
  workflow_dispatch:

jobs:
  create_release:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2
      
    - name: Install ONNX and bump
      run: pip install onnx bump-my-version

    - name: Download artifact
      uses: dawidd6/action-download-artifact@v2
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        workflow: ml_training.yml
        workflow_conclusion: success
        name: lstm_model_onnx_release
        path: ./model

    - name: Get latest release version tag
      id: latest_release
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        LATEST_RELEASE_TAG=$(gh release view --repo ${{ github.repository }} --json tagName -q .tagName)
        echo "LATEST_RELEASE_TAG=$LATEST_RELEASE_TAG" >> $GITHUB_ENV

    - name: Bump ONNX Model Version
      run: |
        CURRENT_VERSION=$MODEL_VERSION
        NEW_VERSION=$(bump-my-version bump --current-version "$CURRENT_VERSION" patch --dry-run | grep 'new_version=' | sed -n 's/.*new_version=\([^&]*\).*/\1/p')
        echo "NEW_VERSION=$NEW_VERSION" >> $GITHUB_ENV

    - name: Set ONNX Model Version
      run: python $GITHUB_WORKSPACE/.github/onnx_utils.py set ./model/lstm_model.onnx $NEW_VERSION
   
    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ env.NEW_VERSION }}
        release_name: Release ${{ env.NEW_VERSION }}
        draft: false
        prerelease: false

    - name: Upload Release Asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./model/lstm_model.onnx
        asset_name: lstm_model_release_${{ env.NEW_VERSION }}.onnx
        asset_content_type: application/octet-stream
